name: test

on:
  push:
    branches:
      - 'master'
    paths-ignore:
      - '**.md'
  pull_request:
    branches:
      - 'master'
    paths-ignore:
      - '**.md'

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      -
        name: Checkout
        uses: actions/checkout@v2
      -
        name: Prepare
        id: prep
        run: |
          echo ::set-output name=build_tag::test
          echo ::set-output name=container_name::fail2ban
          echo ::set-output name=running_timeout::120
          echo ::set-output name=running_log_check::Server ready
      -
        name: Set up QEMU
        uses: docker/setup-qemu-action@v1.1.0
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      -
        name: Build
        uses: docker/bake-action@v1
        with:
          targets: image-local
        env:
          DEFAULT_TAG: ${{ steps.prep.outputs.build_tag }}
      -
        name: Start container
        run: |
          docker rm -f ${{ steps.prep.outputs.container_name }} > /dev/null 2>&1 || true
          docker run -d --name ${{ steps.prep.outputs.container_name }} \
            --network host \
            --cap-add NET_ADMIN \
            --cap-add NET_RAW \
            ${{ steps.prep.outputs.build_tag }}
      -
        name: Test run
        run: |
          TIMEOUT=$((SECONDS + ${{ steps.prep.outputs.running_timeout }}))
          while read LOGLINE; do
            echo ${LOGLINE}
            if [[ ${LOGLINE} == *"${{ steps.prep.outputs.running_log_check }}"* ]]; then
              echo "🎉 Container up!"
              break
            fi
            if [[ $SECONDS -gt ${TIMEOUT} ]]; then
              >&2 echo "❌ Failed to run ${{ steps.prep.outputs.container_name }} container"
              docker rm -f ${{ steps.prep.outputs.container_name }} > /dev/null 2>&1 || true
              exit 1
            fi
          done < <(docker logs -f ${{ steps.prep.outputs.container_name }} 2>&1)

          CONTAINER_STATUS=$(docker container inspect --format "{{.State.Status}}" ${{ steps.prep.outputs.container_name }})
          if [[ ${CONTAINER_STATUS} != "running" ]]; then
            >&2 echo "❌ Container ${{ steps.prep.outputs.container_name }} returned status '$CONTAINER_STATUS'"
            docker rm -f ${{ steps.prep.outputs.container_name }} > /dev/null 2>&1 || true
            exit 1
          fi
          docker rm -f ${{ steps.prep.outputs.container_name }} > /dev/null 2>&1 || true
          echo
